2018-10-11-hh-mm-jack-diederich-stop-writing-classes.txt



source:
    (
    yt
    >>
    Next Day Video
    >>
    Stop Writing Classes
    [by Jack Diederich, a Python core developer]
    )



transcript:

    I don't mean to disappoint,
    but I'm actually going to agree with everything that Raymond [Hettinger] just said



    [
    recall the Zen of Python
    ]
    Simple is better than complex.
    Flat is better than nested.
    Readability counts.
    If the implementation is hard to explain, it's a bad idea.
    If the implementation is easy to explain, it may be a good idea.

    all of these points say:
    don't do hard things, do easy things



    [what the preceding talk by Raymond Hettinger was about]

        classes can be very complicated

        he laid out some principles
        how you should figure out
        what you shouldn't be doing


    
    [what this talk is about]

        (a)
        don't do hard things in the 1st place,
        do easy things

            all the places where people go wrong
            and
            how you can just not do that at all

            you end up doing that anyway
            - even when you're trying to avoid it -
            so this talk [is also going to explain]
            how to notice when you've gone down the wrong path
            [and, from there, how to]

        (b)
        revert complications later



    [Jack Diederich]
    this is what I tell the guys at work all the time:
    """
    I hate code and I want as little of it as possible in our product.
    We ship features, we do not ship code.
    We don't have customers because we have lots of code;
    we have customers because we have lots of features.
    """


    
    this is the biggest overuse of classes you see out in the wild:
    ```python
    class Greeting(object):

        def __init__(self, greeting='hello'):
            self.greeting = greeting
        
        def greet(self, name):
            return "%s! %s" % (self.greeting, name)
    

    greeting = Greeting('hola')
    print greeting.greet('bob')
    ```

    this is _not_ a class!
    it looks like a class...
    [but] the signature of "this shouldn't be a class" is that
    it has 2 methods, one of which is `__init__`

    anyitime you start aliasing your classes
    to just intantiate them once, use them once, and then throw them away,
    in your brain you should be thinking,
    "Oh, I can refactor that - it can be simpler! Much simpler!"



    [
    if you have a Computer Science degree,
    it is highly likely that
    you were taught that classes give us the following lovely things:
    ]

        - separation of concerns

        - decoupling

        - encapsulation

        - implementation hiding



        I haven't used those words in 15 years
        (since I graduated).

        Anytime you hear someone using one of those words,
        they're trying to pull a fast one on you.

        It just doesn't come up.
        And even if it does come up,
        people mean different things when they use them.
        It's not useful for furthering conversation.



    lots of you use 3rd-party APIs in your day-to-day job

    anytime you have to use someone else's code,
    the first thing you have to do is read it



    "The overuse of classes,
    lots of time people think you might need sth later
    - you don't ... or you can just do it later -
    if it comes up, you know, do it."



    ```python
    class MuffinHash(dict):
        pass
    ```

        JD:
        "If you think you had good reasons for it
        and then you notice later that they weren't good reasons,
        you can go back & refactor it out."

        "ciriticism of the design process"


    "To echo what Raymond [Hettinger] said, ...
    namespaces are not for creating taxonomies, ...
    namespaces are for preventing name collisions.
    If you have a deep hierarchy,
    you are not doing anyone any favors...
    The [Python] Standard Library has a very flat namespace."



    - exceptions are overused

    "Anytime you type a class,
    you should be thinking,
    'What am I doing this for?'"

    good:
    EmptyBeer
    BeerError
    BeerNotFound

    bad:
    EmptyBeerNotFoundError

    "You can just use [Python] Standard Library exceptions. People understand them."

    "[Python] Standard Library has got some rusty corners
    but it's a pretty good example how you should do things."

        - 200k SLOC
        - 200 top-level modules
        - averages 10 files per package
        - defines 165 Exceptions



        "So once again -
        any time you think you need to write an exception,
        you probably don't."



        ...:
        is subclassing the built-in exceptions still overkill or ... more acceptable?
        ... from the ... of, if you just catch all `KeyError`s,
        you're gonna catch errors you don't intend to catch.

        JD:
        I don't use custom Exceptions until I need to ...
        define your own exceptions only when you have to
        


    examples when class implementations are warranted

        - a bundle of mutable data
          & a bunch of related functions

        "there's about 10 methods in the `heapq` module &
        they all act on the same heap -
        so their first argument is always ...
        the same thing, which ... implies:
        yes, this actually is a class."



    ```
    class Flow(object):
        "Base class for all flow objects."
        pass
    ```

    ```
    class Error(Exception):
        pass
    ```



    "Conway's game of life"
    --> "Conway's really simple game of life"



    Conclusion

    (1) "If you see a class with 2 methods..., it's not a class."

    (2) "Don't make new exceptions when you don't need to."

    (3) "Refactor relentlessly."


---------------------------



    RH:
    What do you think the social forces are that drive people to write "the ... Muffin-style code"?

    JD:
    It's ex-Java people,
    it's what they teach in CS curriculum...

    ...

    JD:
    Yes,
    it's a form of premature optimization.

    ...:
    ... classes as containers for constants -
    they don't actually do anything.
    They just hold a bunch of constants.
    How do you feel about those?

    JD:
    ... it's sometimes useful to use classes as tiny namespaces -
    when you don't want to add a module ...

    it's even useful to hold functions in ...
    so if you want a small namespace with some constants in it
    & maybe a small bag of functions,
    then classes are fine
